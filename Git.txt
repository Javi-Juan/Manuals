git init
--------
The word init means initialize. The command sets up all the tools Git needs to 
begin tracking changes made to the project.

A Git project can be thought of as having three parts:

    ·Working Directory: where you'll be doing all the work: creating, editing, deleting and organizing files
    ·Staging Area: where you'll list changes you make to the working directory
    ·Repository: where Git permanently stores those changes as different versions of the project

The Git workflow consists of editing files in the working directory, adding files to the staging area, 
and saving changes to a Git repository. In Git, we save changes with a commit


git status "project-name"
-------------------------
Checks the status of the project


git add "filename"
------------------
adds a file in the staging area to tracks


git diff
--------
Since the file is tracked, we can check the differences between the working directory and the staging area.
press 'q' on your keyboard to exit diff mode.


commit
------
A commit is the last step in our Git workflow. A commit permanently stores changes from the staging 
area inside the repository.

git commit is the command we'll do next. However, one more bit of code is needed for a commit: 
the option -m followed by a message. Here's an example:

	git commit -m "Complete first line of dialogue"

Standard Conventions for Commit Messages:
    ·Must be in quotation marks
    ·Written in the present tense
    ·Should be brief (50 characters or less) when using -m


git log
-------
Often with Git, you'll need to refer back an earlier version of a project. 
Commits are stored chronologically in the repository and can be viewed with:
     git log
